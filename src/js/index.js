gsap.registerPlugin(ScrollTrigger);

// Menu Open and Close Animtion Js
$(document).ready(function () {
    // Menu Open Start

    function menuOpen() {
        $('body').addClass('menu-open');
        $('.header').css('z-index', '9999');
        $('body').css('overflow', 'hidden');
        $('body').css('cursor', 'auto');
        $('.main-nav').css({ "top": "0px", "z-index": "999" });
    }

    function menuClose() {
        $('body').removeClass('menu-open');
        $('.header').css('z-index', '9999');
        $('body').css('overflow', 'unset');
        $('.main-nav').css({ "top": "0px", "z-index": "-1" });
    }

    let t1 = gsap.timeline({
        paused: true,
        onStart: menuOpen,
        onReverseComplete: menuClose,
    });

    t1.to(".main-nav::before",
        {
            scale: 2,
            duration: 1,
            ease: "Power3.InOut",
        });

    t1.from(".menu-inner li",
        {
            duration: 0.2,
            stagger: 0.15,
            opacity: 0,
            y: 50,
            ease: "Power3.InOut",
        })

    t1.reverse();

    $('.hamburger').on('click', function () {
        t1.reversed(!t1.reversed());
    });
    // Menu Open End
});

// Menu Open and Close event Js
$('.hamburger').on('click', function () {
    $('body').toggleClass('menu-open');
    $('body').toggleClass('menu-close');
});

// Gsap Animation for Section Come Left to from Right Js
gsap.utils.toArray(".anim_left").forEach((element1) => {
    // Create a GSAP animation for each element1
    const animation = gsap.fromTo(
        element1,
        { autoAlpha: 0, x: -100, y: 25 },
        { delay: 0.25, duration: 0.5, autoAlpha: 1, x: 0, y: 0, stagger: 0.25 }
    );

    // Create a ScrollTrigger for each element1
    ScrollTrigger.create({
        trigger: element1,
        ease: "back.inOut(1.25)",
        animation: animation,
        toggleActions: "play none none none",
        once: false
    });
});

// Gsap Animation for Section Come from Right to Left Js
gsap.utils.toArray(".anim_right").forEach((element1) => {
    // Create a GSAP animation for each element1
    const animation = gsap.fromTo(
        element1,
        { autoAlpha: 0, x: 100, y: 25 },
        { delay: 0.25, duration: 0.5, autoAlpha: 1, x: 0, y: 0, stagger: 0.25 }
    );

    // Create a ScrollTrigger for each element1
    ScrollTrigger.create({
        trigger: element1,
        ease: "back.inOut(1.25)",
        animation: animation,
        toggleActions: "play none none none",
        once: false
    });
});

// Cursor Js
$(document).ready(function () {
    let cursor = document.querySelector('.cursor');
    let mouseX = 0;
    let mouseY = 0;

    gsap.to({}, 0.016, {
        repeat: -1,
        onRepeat: function () {
            gsap.set(cursor, {
                css: {
                    left: mouseX,
                    top: mouseY,
                }
            })
        }
    });

    window.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
    })
});

// Canvas Js
$(document).ready(function () {
    var canvas = document.getElementById('nokey'),
        can_w = parseInt(canvas.getAttribute('width')),
        can_h = parseInt(canvas.getAttribute('height')),
        ctx = canvas.getContext('2d');

    var BALL_NUM = 40;
    var R = 20; // Adjusted for better visibility
    var balls = [],
        alpha_f = 0.01,
        alpha_phase = 0,

        // Line
        link_line_width = 0.275,
        dis_limit = 150,
        add_mouse_point = true,
        mouse_in = false,
        mouse_ball = {
            x: 0,
            y: 0,
            vx: 0,
            vy: 0,
            r: 0,
            type: 'mouse'
        };

    // Array of SVG data strings
    var svgDataArray = [
        `<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 53 53" style="enable-background:new 0 0 53 53;" xml:space="preserve">
	<rect x="27" y="28" style="fill:#353535e6;" width="2" height="18"/>
	<rect x="37.5" y="2.893" transform="matrix(0.7071 0.7071 -0.7071 0.7071 20.8223 -23.2696)" style="fill:#353535e6;" width="2" height="21.213"/>
	<rect x="15" y="21.858" transform="matrix(0.7071 0.7071 -0.7071 0.7071 30.1421 -0.7696)" style="fill:#353535e6;" width="2" height="28.284"/>
	<rect x="10.722" y="13.5" transform="matrix(0.7071 0.7071 -0.7071 0.7071 15.6716 -8.8345)" style="fill:#353535e6;" width="15.556" height="2"/>
	<rect x="26.893" y="32.5" transform="matrix(0.7071 0.7071 -0.7071 0.7071 34.6716 -16.7046)" style="fill:#353535e6;" width="21.213" height="2"/>
	<circle style="fill:#353535e6;" cx="48" cy="5" r="5"/>
	<circle style="fill:#353535e6;" cx="28" cy="48" r="5"/>
	<circle style="fill:#353535e6;" cx="5" cy="46" r="5"/>
	<circle style="fill:#353535e6;" cx="12" cy="8" r="3"/>
	<circle style="fill:#353535e6;" cx="44" cy="40" r="3"/>
	<circle style="fill:#353535e6;" cx="28" cy="24" r="7"/>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
</svg>`,
        `<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 461.367 461.367" style="enable-background:new 0 0 461.367 461.367;" xml:space="preserve">
	<g>
		<g>
			<g>
				<g id="XMLID_29_">
					<g>
						<path style="fill:#353535e6;" d="M373.88,367.988c0,0.037,0,0.075,0,0.122c-37.818,34.295-88.019,55.185-143.083,55.185
						c-55.073,0-105.275-20.89-143.092-55.185c0-0.047,0-0.084,0-0.122c0-57.04,33.377-106.277,81.659-129.256
						c18.145,18.098,39.391,27.85,61.434,27.85c22.052,0,43.288-9.752,61.443-27.85C340.521,261.711,373.88,310.947,373.88,367.988z
						"/>
						<path style="fill:#353535e6;" d="M230.797,58.571c43.71,0,79.148,35.429,79.148,79.139c0,43.719-35.438,103.504-79.148,103.504
						s-79.148-59.785-79.148-103.504C151.649,94,187.087,58.571,230.797,58.571z"/>
					</g>
				</g>
			</g>
			<g>
				<g>
					<g id="XMLID_27_">
						<g>
							<path style="fill:#353535e6;" d="M164.094,213.389c2.426,3.457,4.937,6.698,7.532,9.742l-7.897,3.756
							c-26.286,12.506-48.525,32.075-64.328,56.59c-12.853,19.944-20.909,42.427-23.71,65.865
							c-28.562-7.785-54.38-22.22-75.691-41.546v-0.103c0-49.705,29.087-92.609,71.157-112.638
							c15.813,15.775,34.323,24.272,53.527,24.272c12.581,0,24.871-3.644,36.291-10.595
							C161.977,210.307,163.026,211.862,164.094,213.389z"/>
							<path style="fill:#353535e6;" d="M138.539,137.707c0,16.431,4.272,34.511,11.878,51.504c-7.953,5.04-16.637,8.009-25.733,8.009
							c-38.089,0-68.965-52.094-68.965-90.193c0-38.089,30.876-68.956,68.965-68.956c21.124,0,40.038,9.499,52.684,24.459
							C153.883,79.28,138.539,106.737,138.539,137.707z"/>
						</g>
					</g>
				</g>
				<g>
					<g id="XMLID_22_">
						<g>
							<path style="fill:#353535e6;" d="M297.273,213.389c-2.426,3.457-4.937,6.698-7.532,9.742l7.897,3.756
							c26.286,12.506,48.525,32.075,64.328,56.59c12.853,19.944,20.909,42.427,23.71,65.865c28.562-7.785,54.38-22.22,75.691-41.546
							v-0.103c0-49.705-29.087-92.609-71.157-112.638c-15.813,15.775-34.323,24.272-53.527,24.272
							c-12.581,0-24.871-3.644-36.291-10.595C299.39,210.307,298.341,211.862,297.273,213.389z"/>
							<path style="fill:#353535e6;" d="M322.828,137.707c0,16.431-4.272,34.511-11.878,51.504c7.953,5.04,16.637,8.009,25.733,8.009
							c38.089,0,68.965-52.094,68.965-90.193c0-38.089-30.876-68.956-68.965-68.956c-21.124,0-40.038,9.499-52.684,24.459
							C307.484,79.28,322.828,106.737,322.828,137.707z"/>
						</g>
					</g>
				</g>
			</g>
		</g>
	</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
</svg>`,
        `<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
	<g>
		<polygon style="fill:#353535e6;" points="292.599,270 219.401,270 249.401,176.675 262.599,176.675 	"/>
		<polygon style="fill:#353535e6;" points="386.499,486.2 365.501,507.8 256,402.8 146.499,507.8 125.501,486.2 234.401,382.099 
		185.501,335.3 206.499,313.7 256,361.099 305.501,313.7 326.499,335.3 277.599,382.099 	"/>
	</g>
	<g>
		<polygon style="fill:#353535e6;" points="292.599,270 256,270 256,176.675 262.599,176.675 	"/>
		<polygon style="fill:#353535e6;" points="386.499,486.2 365.501,507.8 256,402.8 256,361.099 305.501,313.7 326.499,335.3 
		277.599,382.099 	"/>
	</g>
	<polygon style="fill:#353535e6;" points="390.099,492.199 361.901,501.799 256,192.274 150.099,501.799 121.901,492.199 
	241.901,141.874 256,146.675 270.099,141.874 "/>
	<polygon style="fill:#353535e6;" points="390.099,492.199 361.901,501.799 256,192.274 256,146.675 270.099,141.874 "/>
	<path style="fill:#353535e6;" d="M139.325,233.35c-64.321-64.336-64.321-169.014,0-233.35l21.211,21.211
	c-52.617,52.632-52.617,138.296,0,190.928L139.325,233.35z"/>
	<path style="fill:#353535e6;" d="M372.675,233.35l-21.211-21.211c52.617-52.632,52.617-138.296,0-190.928L372.675,0
	C436.996,64.336,436.996,169.014,372.675,233.35z"/>
	<path style="fill:#353535e6;" d="M181.762,190.913c-19.805-19.805-30.718-46.157-30.718-74.238s10.913-54.434,30.718-74.238
	l21.211,21.211c-14.136,14.136-21.929,32.974-21.929,53.027s7.793,38.892,21.929,53.027L181.762,190.913z"/>
	<path style="fill:#353535e6;" d="M330.238,190.913l-21.211-21.211c14.136-14.136,21.929-32.974,21.929-53.027
	s-7.793-38.892-21.929-53.027l21.211-21.211c19.805,19.805,30.718,46.157,30.718,74.238S350.043,171.108,330.238,190.913z"/>
	<path style="fill:#353535e6;" d="M256,71.675c-24.901,0-45,20.099-45,45c0,24.899,20.099,45,45,45s45-20.101,45-45
	C301,91.774,280.901,71.675,256,71.675z"/>
	<rect x="76" y="482" style="fill:#353535e6;" width="360" height="30"/>
	<rect x="256" y="482" style="fill:#353535e6;" width="180" height="30"/>
	<path style="fill:#353535e6;" d="M301,116.675c0,24.899-20.099,45-45,45v-90C280.901,71.675,301,91.774,301,116.675z"/>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
	<g>
</g>
</svg>`,
        `<svg height="480pt" viewBox="0 0 480 480" width="480pt" xmlns="http://www.w3.org/2000/svg">
    <path d="m440 312c-11.199219 0-21.121094-5.761719-26.800781-14.558594-3.277344-5.042968-5.199219-11.042968-5.199219-17.441406 0-17.679688 14.320312-32 32-32s32 14.320312 32 32-14.320312 32-32 32zm0 0" fill="#35353580"/>
    <path d="m439.839844 164.078125c-15.199219 12.402344-34.640625 19.921875-55.839844 19.921875-10.558594 0-20.640625-1.839844-29.921875-5.199219v-.082031c-9.519531-3.359375-18.238281-8.398438-25.917969-14.640625 2-24.636719 22.71875-44.078125 47.839844-44.078125h16c25.121094 0 45.839844 19.441406 47.839844 44.078125zm0 0" fill="#35353580"/>
    <path d="m416 88c0 17.671875-14.328125 32-32 32s-32-14.328125-32-32 14.328125-32 32-32 32 14.328125 32 32zm0 0" fill="#35353580"/>
    <path d="m384 8c48.640625 0 88 39.359375 88 88 0 27.441406-12.480469 51.921875-32.160156 68.078125-2-24.636719-22.71875-44.078125-47.839844-44.078125h-8c17.679688 0 32-14.320312 32-32s-14.320312-32-32-32-32 14.320312-32 32 14.320312 32 32 32h-8c-25.121094 0-45.839844 19.441406-47.839844 44.078125-10.878906-8.957031-19.601562-20.476563-25.199218-33.679687-4.480469-10.558594-6.960938-22.160157-6.960938-34.398438 0-10.71875 1.921875-20.960938 5.441406-30.398438 12.320313-33.679687 44.636719-57.601562 82.558594-57.601562zm0 0" fill="#35353580"/>
    <path d="m280 472c-21.28125 0-40.800781-7.519531-56-20.078125 2.078125-24.5625 22.800781-43.921875 47.839844-43.921875h16c25.121094 0 45.839844 19.441406 47.839844 44.078125l.082031.082031c-15.203125 12.398438-34.5625 19.839844-55.761719 19.839844zm0 0" fill="#35353580"/>
    <path d="m271.839844 408c-25.039063 0-45.761719 19.359375-47.839844 43.921875-14.558594-12-25.121094-28.5625-29.601562-47.523437-1.597657-6.558594-2.398438-13.359376-2.398438-20.398438 0-25.839844 11.121094-49.039062 28.800781-65.121094 15.597657-14.238281 36.398438-22.878906 59.199219-22.878906 10.558594 0 20.640625 1.839844 29.921875 5.199219v.082031c18.15625 6.480469 33.519531 18.878906 43.839844 34.796875 9.039062 13.761719 14.238281 30.242187 14.238281 47.921875 0 27.441406-12.558594 52-32.238281 68.160156l-.082031-.082031c-2-24.636719-22.71875-44.078125-47.839844-44.078125h-8c17.679687 0 32-14.320312 32-32s-14.320313-32-32-32c-17.679688 0-32 14.320312-32 32s14.320312 32 32 32zm0 0" fill="#35353580"/>
    <path d="m311.839844 376c0 17.671875-14.328125 32-32 32s-32-14.328125-32-32 14.328125-32 32-32 32 14.328125 32 32zm0 0" fill="#35353580"/>
    <path d="m232 8c17.679688 0 32 14.320312 32 32 0 3.921875-.71875 7.601562-2 11.039062-4.480469 12.242188-16.238281 20.960938-30 20.960938-17.679688 0-32-14.320312-32-32s14.320312-32 32-32zm0 0" fill="#35353580"/>
    <path d="m120 296c-15.519531 0-30.078125-4-42.71875-11.039062-4.722656-2.5625-9.121094-5.601563-13.28125-9.039063 2.078125-24.5625 22.800781-43.921875 47.839844-43.921875h16c25.121094 0 45.839844 19.441406 47.839844 44.078125l.082031.082031c-15.203125 12.398438-34.5625 19.839844-55.761719 19.839844zm0 0" fill="#35353580"/>
    <path d="m151.839844 200c0 17.671875-14.328125 32-32 32s-32-14.328125-32-32 14.328125-32 32-32 32 14.328125 32 32zm0 0" fill="#35353580"/>
    <path d="m112 456c-17.679688 0-32-14.320312-32-32s14.320312-32 32-32c15.121094 0 27.761719 10.480469 31.121094 24.558594.558594 2.402344.878906 4.882812.878906 7.441406 0 17.679688-14.320312 32-32 32zm0 0" fill="#35353580"/>
    <path d="m111.839844 232c-25.039063 0-45.761719 19.359375-47.839844 43.921875-19.519531-16.160156-32-40.5625-32-67.921875 0-35.121094 20.480469-65.359375 50.160156-79.519531 11.441406-5.441407 24.320313-8.480469 37.839844-8.480469 36.398438 0 67.601562 22.078125 81.039062 53.601562 4.480469 10.558594 6.960938 22.160157 6.960938 34.398438 0 25.839844-11.121094 49.039062-28.800781 65.121094-1.121094 1.039062-2.238281 2-3.4375 3.039062l-.082031-.082031c-2-24.636719-22.71875-44.078125-47.839844-44.078125h-8c17.679687 0 32-14.320312 32-32s-14.320313-32-32-32c-17.679688 0-32 14.320312-32 32s14.320312 32 32 32zm0 0" fill="#35353580"/>
    <path d="m40 320c5.601562 0 10.960938 1.441406 15.519531 4.078125 9.839844 5.441406 16.480469 15.921875 16.480469 27.921875 0 17.679688-14.320312 32-32 32s-32-14.320312-32-32 14.320312-32 32-32zm0 0" fill="#35353580"/>
    <path d="m40 8c17.679688 0 32 14.320312 32 32 0 12.71875-7.441406 23.761719-18.238281 28.800781-4.160157 2.078125-8.882813 3.199219-13.761719 3.199219-17.679688 0-32-14.320312-32-32s14.320312-32 32-32zm0 0" fill="#35353580"/>
    <path d="m384 192c52.9375 0 96-43.0625 96-96s-43.0625-96-96-96c-38.441406 0-71.585938 22.761719-86.902344 55.472656l-25.707031-9.488281c.304687-1.96875.609375-3.9375.609375-5.984375 0-22.054688-17.945312-40-40-40s-40 17.945312-40 40 17.945312 40 40 40c14.328125 0 26.824219-7.640625 33.886719-18.992188l25.664062 9.472657c-2.253906 8.144531-3.550781 16.671875-3.550781 25.519531 0 10.480469 1.742188 20.542969 4.863281 29.992188l-87.984375 37.289062c-16.109375-30.457031-48.085937-51.28125-84.878906-51.28125-11.921875 0-23.296875 2.289062-33.839844 6.273438l-22.128906-46.503907c9.640625-7.3125 15.96875-18.769531 15.96875-31.769531 0-22.054688-17.945312-40-40-40s-40 17.945312-40 40 17.945312 40 40 40c3.328125 0 6.519531-.527344 9.617188-1.304688l22.101562 46.457032c-28.488281 16.671875-47.71875 47.519531-47.71875 82.847656 0 33.183594 16.929688 62.472656 42.59375 79.71875l-14.632812 26.304688c-3.808594-1.199219-7.769532-2.023438-11.960938-2.023438-22.054688 0-40 17.945312-40 40s17.945312 40 40 40 40-17.945312 40-40c0-12.113281-5.527344-22.855469-14.054688-30.191406l14.664063-26.359375c12.03125 5.445312 25.34375 8.550781 39.390625 8.550781 21.953125 0 42.144531-7.488281 58.335938-19.9375l31.488281 34.640625c-15.96875 17.152344-25.824219 40.066406-25.824219 65.296875 0 4.894531.488281 9.664062 1.191406 14.359375l-37.046875 8.792969c-6.375-13.632813-20.128906-23.152344-36.144531-23.152344-22.054688 0-40 17.945312-40 40s17.945312 40 40 40 40-17.945312 40-40c0-.441406-.121094-.855469-.128906-1.296875l36.976562-8.765625c12.609375 38.308594 48.671875 66.0625 91.152344 66.0625 52.9375 0 96-43.0625 96-96 0-16.414062-4.152344-31.871094-11.449219-45.390625l46.992188-30.554687c7.265625 7.359374 17.328125 11.945312 28.457031 11.945312 22.054688 0 40-17.945312 40-40s-17.945312-40-40-40-40 17.945312-40 40c0 5.167969 1.0625 10.078125 2.855469 14.617188l-47.101563 30.621093c-9.425781-12.117187-21.664062-21.902343-35.753906-28.398437l39.046875-108.246094c7.96875 2.148438 16.3125 3.40625 24.953125 3.40625zm-152-128c-13.230469 0-24-10.769531-24-24s10.769531-24 24-24 24 10.769531 24 24-10.769531 24-24 24zm-216-24c0-13.230469 10.769531-24 24-24s24 10.769531 24 24-10.769531 24-24 24-24-10.769531-24-24zm24 336c-13.230469 0-24-10.769531-24-24s10.769531-24 24-24 24 10.769531 24 24-10.769531 24-24 24zm72 72c-13.230469 0-24-10.769531-24-24s10.769531-24 24-24 24 10.769531 24 24-10.769531 24-24 24zm328-192c13.230469 0 24 10.769531 24 24s-10.769531 24-24 24-24-10.769531-24-24 10.769531-24 24-24zm-103.113281-95.488281c3.570312-18.503907 19.882812-32.511719 39.113281-32.511719h16c19.230469 0 35.542969 14.007812 39.113281 32.511719-13.234375 9.6875-29.488281 15.488281-47.113281 15.488281s-33.878906-5.800781-47.113281-15.488281zm47.113281-48.511719c-13.230469 0-24-10.769531-24-24s10.769531-24 24-24 24 10.769531 24 24-10.769531 24-24 24zm0-96c44.113281 0 80 35.886719 80 80 0 20-7.433594 38.273438-19.617188 52.3125-5.605468-14.761719-17.292968-26.542969-31.855468-32.359375 7.082031-7.21875 11.472656-17.074219 11.472656-27.953125 0-22.054688-17.945312-40-40-40s-40 17.945312-40 40c0 10.878906 4.390625 20.734375 11.472656 27.953125-14.5625 5.816406-26.25 17.597656-31.855468 32.359375-12.183594-14.039062-19.617188-32.3125-19.617188-52.3125 0-44.113281 35.886719-80 80-80zm-344 192c0-44.113281 35.886719-80 80-80s80 35.886719 80 80c0 20.0625-7.480469 38.382812-19.726562 52.441406-5.585938-14.816406-17.296876-26.65625-31.898438-32.488281 7.074219-7.21875 11.464844-17.074219 11.464844-27.953125 0-22.054688-17.945313-40-40-40-22.054688 0-40 17.945312-40 40 0 10.878906 4.390625 20.734375 11.472656 27.953125-14.519531 5.789063-26.191406 17.527344-31.816406 32.230469-12.113282-14.023438-19.496094-32.238282-19.496094-52.183594zm55.839844-8c0-13.230469 10.769531-24 24-24 13.230468 0 24 10.769531 24 24s-10.769532 24-24 24c-13.230469 0-24-10.769531-24-24zm-23.085938 72.40625c3.605469-18.453125 19.894532-32.40625 39.085938-32.40625h16c19.265625 0 35.609375 14.054688 39.128906 32.617188-13.207031 9.628906-29.410156 15.382812-46.96875 15.382812-17.6875 0-33.992188-5.839844-47.246094-15.59375zm160 176c3.605469-18.453125 19.894532-32.40625 39.085938-32.40625h16c19.265625 0 35.609375 14.054688 39.128906 32.617188-13.207031 9.628906-29.410156 15.382812-46.96875 15.382812-17.6875 0-33.992188-5.839844-47.246094-15.59375zm47.085938-48.40625c-13.230469 0-24-10.769531-24-24s10.769531-24 24-24c13.230468 0 24 10.769531 24 24s-10.769532 24-24 24zm80.160156-16c0 20.0625-7.480469 38.382812-19.726562 52.441406-5.585938-14.816406-17.296876-26.65625-31.898438-32.488281 7.074219-7.21875 11.464844-17.074219 11.464844-27.953125 0-22.054688-17.945313-40-40-40-22.054688 0-40 17.945312-40 40 0 10.878906 4.390625 20.734375 11.472656 27.953125-14.519531 5.789063-26.191406 17.527344-31.816406 32.230469-12.113282-14.023438-19.496094-32.238282-19.496094-52.183594 0-44.113281 35.886719-80 80-80s80 35.886719 80 80zm-55.046875-92.59375c-7.96875-2.148438-16.3125-3.40625-24.953125-3.40625-21.953125 0-42.144531 7.488281-58.335938 19.9375l-31.488281-34.640625c15.96875-17.152344 25.824219-40.066406 25.824219-65.296875 0-10.480469-1.742188-20.542969-4.863281-29.992188l87.984375-37.289062c9.855468 18.632812 25.671875 33.585938 44.886718 42.441406zm0 0" fill="#35353580"/>
</svg>`,
        `<svg height="512pt" viewBox="0 0 512 512" width="512pt" xmlns="http://www.w3.org/2000/svg">
    <path d="m453.949219 74.050781c0 17.675781-14.328125 32-32 32-17.675781 0-32-14.324219-32-32 0-17.671875 14.324219-32 32-32 17.671875 0 32 14.328125 32 32zm0 0" fill="#353535e6"/>
    <path d="m122.050781 437.949219c0 17.671875-14.324219 32-32 32-17.671875 0-32-14.328125-32-32 0-17.675781 14.328125-32 32-32 17.675781 0 32 14.324219 32 32zm0 0" fill="#353535e6"/>
    <path d="m400.835938 224.644531c-3.8125-17.730469-10.789063-34.285156-20.320313-49.035156l19.160156-19.164063-44.230469-44.195312-19.144531 19.144531c-14.75-9.53125-31.304687-16.507812-49.035156-20.320312v-27.074219h-62.527344v27.074219c-17.734375 3.8125-34.289062 10.789062-49.039062 20.320312l-19.144531-19.144531-44.230469 44.195312 19.160156 19.164063c-9.53125 14.75-16.507813 31.304687-20.320313 49.035156h-27.148437l-.035156 62.527344h27.183593c3.808594 17.734375 10.785157 34.289063 20.320313 49.039063l-19.234375 19.234374 44.199219 44.230469 19.25-19.25c14.75 9.535157 31.304687 16.511719 49.039062 20.320313v27.253906h62.527344v-27.253906c17.730469-3.808594 34.285156-10.785156 49.039063-20.320313l19.25 19.25 44.195312-44.230469-19.234375-19.234374c9.535156-14.75 16.511719-31.304688 20.320313-49.039063h27.183593v-62.527344zm-144.835938 103.984375c-40.113281 0-72.628906-32.515625-72.628906-72.628906s32.515625-72.628906 72.628906-72.628906 72.628906 32.515625 72.628906 72.628906-32.515625 72.628906-72.628906 72.628906zm0 0" fill="#353535e6"/>
    <path d="m90.050781 395.949219c-7.167969 0-14.058593 1.789062-20.171875 5.148437-32.203125-41.28125-49.878906-92.5625-49.878906-145.097656 0-130.132812 105.867188-236 236-236 15.820312 0 31.632812 1.574219 47 4.679688 5.40625 1.09375 10.6875-2.40625 11.78125-7.820313s-2.40625-10.6875-7.820312-11.785156c-16.667969-3.367188-33.8125-5.074219-50.960938-5.074219-68.378906 0-132.667969 26.628906-181.019531 74.980469-48.351563 48.351562-74.980469 112.640625-74.980469 181.019531 0 57.519531 19.53125 113.652344 55.089844 158.652344-4.578125 6.839844-7.039063 14.878906-7.039063 23.296875 0 11.21875 4.371094 21.765625 12.304688 29.695312 7.929687 7.933594 18.476562 12.304688 29.695312 12.304688s21.765625-4.371094 29.699219-12.304688c7.933594-7.929687 12.300781-18.480469 12.300781-29.699219 0-11.214843-4.367187-21.765624-12.300781-29.695312-7.933594-7.933594-18.480469-12.300781-29.699219-12.300781zm15.554688 57.554687c-4.152344 4.15625-9.679688 6.445313-15.554688 6.445313s-11.398437-2.289063-15.554687-6.445313-6.445313-9.679687-6.445313-15.554687c0-5.878907 2.289063-11.402344 6.445313-15.558594 4.152344-4.15625 9.679687-6.441406 15.554687-6.441406s11.398438 2.289062 15.554688 6.441406c4.15625 4.15625 6.445312 9.679687 6.445312 15.558594 0 5.875-2.289062 11.398437-6.445312 15.554687zm0 0"/>
    <path d="m456.902344 97.335938c10.871094-16.308594 9.125-38.605469-5.253906-52.984376-7.933594-7.929687-18.480469-12.300781-29.699219-12.300781s-21.765625 4.371094-29.699219 12.300781c-7.933594 7.933594-12.300781 18.480469-12.300781 29.699219s4.367187 21.765625 12.300781 29.699219 18.480469 12.300781 29.699219 12.300781c7.167969 0 14.058593-1.789062 20.171875-5.148437 32.203125 41.285156 49.878906 92.5625 49.878906 145.097656 0 130.132812-105.867188 236-236 236-15.664062 0-31.328125-1.542969-46.550781-4.589844-5.414063-1.082031-10.683594 2.429688-11.769531 7.84375-1.082032 5.417969 2.429687 10.683594 7.84375 11.769532 16.511718 3.300781 33.496093 4.976562 50.476562 4.976562 68.378906 0 132.667969-26.628906 181.019531-74.980469 48.351563-48.351562 74.980469-112.640625 74.980469-181.019531 0-57.523438-19.535156-113.660156-55.097656-158.664062zm-50.507813-7.726563c-4.15625-4.15625-6.445312-9.679687-6.445312-15.558594 0-5.875 2.289062-11.398437 6.445312-15.554687 4.152344-4.15625 9.679688-6.445313 15.554688-6.445313s11.402343 2.289063 15.558593 6.445313c8.574219 8.578125 8.574219 22.535156 0 31.113281-4.15625 4.152344-9.683593 6.441406-15.558593 6.441406-5.878907 0-11.402344-2.289062-15.554688-6.441406zm0 0"/>
    <path d="m214.734375 428c0 5.523438 4.480469 10 10 10h62.527344c5.523437 0 10-4.476562 10-10v-19.386719c13.148437-3.539062 25.71875-8.75 37.53125-15.554687l13.6875 13.6875c1.875 1.875 4.417969 2.929687 7.074219 2.929687 2.648437 0 5.195312-1.054687 7.070312-2.933593l44.195312-44.226563c3.902344-3.90625 3.902344-10.238281 0-14.140625l-13.671874-13.671875c6.804687-11.8125 12.015624-24.382813 15.554687-37.53125h19.3125c5.523437 0 10-4.476563 10-10v-62.527344c0-5.523437-4.476563-10-10-10h-19.316406c-3.539063-13.144531-8.746094-25.714843-15.550781-37.527343l13.597656-13.597657c1.875-1.875 2.929687-4.421875 2.929687-7.074219-.003906-2.652343-1.058593-5.199218-2.933593-7.074218l-44.230469-44.195313c-3.902344-3.902343-10.234375-3.902343-14.140625.003907l-13.578125 13.582031c-11.8125-6.804688-24.382813-12.015625-37.53125-15.554688v-19.207031c0-5.523438-4.476563-10-10-10h-62.527344c-5.519531 0-10 4.476562-10 10v19.210938c-13.144531 3.535156-25.714844 8.746093-37.527344 15.550781l-13.582031-13.582031c-3.902344-3.902344-10.234375-3.90625-14.140625-.003907l-44.226563 44.199219c-1.878906 1.875-2.933593 4.417969-2.933593 7.070312 0 2.652344 1.054687 5.199219 2.929687 7.074219l13.597656 13.597657c-6.804687 11.8125-12.015624 24.378906-15.554687 37.527343h-19.277344c-5.523437 0-10 4.476563-10 9.996094l-.035156 62.527344c-.003906 2.652343 1.050781 5.199219 2.925781 7.074219s4.417969 2.929687 7.074219 2.929687h19.3125c3.539063 13.148437 8.75 25.71875 15.554687 37.53125l-13.671874 13.671875c-3.902344 3.902344-3.90625 10.234375 0 14.140625l44.195312 44.226563c1.875 1.875 4.417969 2.933593 7.070312 2.933593h.003907c2.652343 0 5.195312-1.054687 7.070312-2.929687l13.683594-13.6875c11.816406 6.804687 24.386719 12.015625 37.53125 15.554687zm-33.609375-55.972656c-3.957031-2.558594-9.164062-2.003906-12.5 1.328125l-12.175781 12.175781-30.058594-30.082031 12.164063-12.167969c3.332031-3.332031 3.886718-8.539062 1.328124-12.496094-9.066406-14.03125-15.441406-29.410156-18.941406-45.714844-.992187-4.605468-5.0625-7.898437-9.777344-7.898437h-17.175781l.023438-42.527344h17.152343c4.714844 0 8.785157-3.289062 9.777344-7.898437 3.5-16.300782 9.875-31.679688 18.941406-45.710938 2.558594-3.957031 2.003907-9.164062-1.328124-12.496094l-12.085938-12.089843 30.082031-30.058594 12.074219 12.078125c3.335938 3.332031 8.539062 3.882812 12.5 1.328125 14.027344-9.066406 29.40625-15.441406 45.710938-18.941406 4.605468-.992188 7.898437-5.066407 7.898437-9.777344v-17.078125h42.527344v17.074219c0 4.714843 3.289062 8.789062 7.898437 9.777343 16.300782 3.503907 31.683594 9.875 45.710938 18.941407 3.957031 2.558593 9.164062 2.007812 12.496094-1.328125l12.078124-12.074219 30.082032 30.058594-12.085938 12.085937c-3.335937 3.335938-3.886718 8.542969-1.328125 12.5 9.066407 14.03125 15.4375 29.410156 18.941407 45.710938.988281 4.609375 5.0625 7.898437 9.777343 7.898437h17.183594v42.527344h-17.183594c-4.714843 0-8.785156 3.292969-9.777343 7.898437-3.5 16.300782-9.875 31.683594-18.941407 45.710938-2.558593 3.960938-2.003906 9.167969 1.328125 12.5l12.164063 12.164062-30.058594 30.082032-12.175781-12.171875c-3.335938-3.335938-8.542969-3.886719-12.5-1.328125-14.03125 9.066406-29.410156 15.4375-45.710938 18.941406-4.609375.992188-7.898437 5.0625-7.898437 9.777344v17.253906h-42.527344v-17.253906c0-4.710938-3.292969-8.785156-7.898437-9.777344-16.300782-3.5-31.679688-9.875-45.710938-18.941406zm0 0"/>
    <path d="m338.628906 256c0-45.5625-37.066406-82.628906-82.628906-82.628906s-82.628906 37.066406-82.628906 82.628906 37.066406 82.628906 82.628906 82.628906 82.628906-37.066406 82.628906-82.628906zm-145.257812 0c0-34.535156 28.09375-62.628906 62.628906-62.628906s62.628906 28.097656 62.628906 62.628906-28.09375 62.628906-62.628906 62.628906-62.628906-28.09375-62.628906-62.628906zm0 0"/>
    <path d="m348.078125 37.820312c2.632813 0 5.210937-1.070312 7.070313-2.929687 1.859374-1.871094 2.929687-4.449219 2.929687-7.082031 0-2.617188-1.066406-5.199219-2.929687-7.070313-1.859376-1.859375-4.4375-2.929687-7.070313-2.929687-2.640625 0-5.207031 1.070312-7.066406 2.929687-1.863281 1.871094-2.933594 4.441407-2.933594 7.070313 0 2.640625 1.070313 5.210937 2.933594 7.082031 1.859375 1.859375 4.425781 2.929687 7.066406 2.929687zm0 0"/>
    <path d="m164.359375 474.359375c-2.628906 0-5.210937 1.070313-7.070313 2.929687-1.859374 1.859376-2.929687 4.441407-2.929687 7.070313 0 2.640625 1.070313 5.210937 2.929687 7.070313 1.859376 1.859374 4.441407 2.929687 7.070313 2.929687s5.210937-1.070313 7.070313-2.929687c1.859374-1.859376 2.929687-4.441407 2.929687-7.070313s-1.070313-5.210937-2.929687-7.070313c-1.859376-1.859374-4.441407-2.929687-7.070313-2.929687zm0 0"/>
</svg>`,
        `<svg id="Layer_1_1_" enable-background="new 0 0 64 64" height="512" viewBox="0 0 64 64" width="512" xmlns="http://www.w3.org/2000/svg">
    <g fill="#353535e6">
        <path d="m13.55 13h14.9v2h-14.9z" transform="matrix(.94 -.342 .342 .94 -3.524 8.035)"/>
        <path d="m42 9.686h2v22.627h-2z" transform="matrix(.707 -.707 .707 .707 -2.255 36.556)"/>
        <path d="m42 24.444h1.999v12.113h-1.999z" transform="matrix(.136 -.991 .991 .136 6.926 68.943)"/>
        <path d="m20 14.556h2v17.889h-2z" transform="matrix(.447 -.894 .894 .447 -9.41 31.775)"/>
        <path d="m19.825 41.406h2.001v16.018h-2.001z" transform="matrix(.448 -.894 .894 .448 -32.685 45.919)"/>
        <path d="m31 33h2v17h-2z"/>
        <path d="m5.513 26h30.974v2h-30.974z" transform="matrix(.544 -.839 .839 .544 -13.08 29.93)"/>
        <path d="m31.824 42.25h22.832v2h-22.832z" transform="matrix(.691 -.723 .723 .691 -17.903 44.594)"/>
        <path d="m19.785 20.006h2v32.257h-2z" transform="matrix(.86 -.511 .511 .86 -15.542 15.688)"/>
    </g>
    <path d="m17 44c0 1.13-.26 2.19-.74 3.13-1.14 2.3-3.52 3.87-6.26 3.87-3.87 0-7-3.13-7-7s3.13-7 7-7c1.41 0 2.71.41 3.8 1.12 1.93 1.25 3.2 3.41 3.2 5.88z" fill="#353535e6"/>
    <path d="m37.31 49.45c1.06 1.22 1.69 2.81 1.69 4.55 0 3.87-3.13 7-7 7s-7-3.13-7-7c0-.81.14-1.58.39-2.3.48-1.41 1.4-2.6 2.6-3.44 1.13-.8 2.51-1.26 4.01-1.26 2.13 0 4.04.95 5.31 2.45z" fill="#353535e6"/>
    <path d="m54 25c3.87 0 7 3.13 7 7s-3.13 7-7 7c-1.88 0-3.58-.73-4.83-1.95-1.34-1.26-2.17-3.06-2.17-5.05 0-.32.02-.63.07-.94.2-1.56.92-2.95 1.98-4.01 1.27-1.27 3.01-2.05 4.95-2.05z" fill="#353535e6"/>
    <path d="m38.93 29.94c-.45 3.42-3.38 6.06-6.93 6.06-3.87 0-7-3.13-7-7 0-1.13.26-2.19.74-3.13 1.14-2.3 3.52-3.87 6.26-3.87 3.87 0 7 3.13 7 7 0 .32-.02.63-.07.94z" fill="#353535e6"/>
    <path d="m32 3c3.87 0 7 3.13 7 7 0 1.94-.78 3.68-2.05 4.95s-3.01 2.05-4.95 2.05c-1.41 0-2.71-.41-3.8-1.12-1.27-.82-2.26-2.04-2.78-3.49-.27-.74-.42-1.55-.42-2.39 0-3.87 3.13-7 7-7z" fill="#353535e6"/>
    <path d="m16.58 15.61c.27.74.42 1.55.42 2.39 0 1.13-.26 2.19-.74 3.13-.6 1.2-1.53 2.2-2.68 2.88-1.04.63-2.27.99-3.58.99-3.87 0-7-3.13-7-7s3.13-7 7-7c3.03 0 5.6 1.92 6.58 4.61z" fill="#353535e6"/>
</svg>`,
        `<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg">
    <circle cx="256" cy="256" fill="#353535e6" r="156.575"/>
    <path d="m284.988 102.114c53.298 30.573 89.201 88.036 89.201 153.886s-35.903 123.313-89.201 153.886c72.623-13.596 127.587-77.317 127.587-153.886s-54.964-140.29-127.587-153.886z" fill="#353535e6"/>
    <circle cx="256" cy="32.754" fill="#353535e6" r="25.254"/>
    <path d="m266.737 9.895c1.534 3.259 2.395 6.897 2.395 10.737 0 13.947-11.307 25.254-25.254 25.254-3.84 0-7.478-.861-10.737-2.395 4.036 8.577 12.752 14.517 22.859 14.517 13.947 0 25.254-11.307 25.254-25.254 0-10.107-5.94-18.823-14.517-22.859z" fill="#353535e6"/>
    <circle cx="32.754" cy="32.754" fill="#353535e6" r="25.254"/>
    <path d="m43.491 9.895c1.534 3.259 2.395 6.897 2.395 10.737 0 13.947-11.307 25.254-25.254 25.254-3.84 0-7.478-.861-10.737-2.395 4.036 8.577 12.752 14.517 22.859 14.517 13.947 0 25.254-11.307 25.254-25.254 0-10.107-5.939-18.823-14.517-22.859z" fill="#353535e6"/>
    <circle cx="479.246" cy="256" fill="#353535e6" r="25.254"/>
    <path d="m489.983 233.141c1.534 3.259 2.395 6.897 2.395 10.737 0 13.947-11.307 25.254-25.254 25.254-3.84 0-7.478-.861-10.737-2.395 4.036 8.577 12.752 14.517 22.859 14.517 13.947 0 25.254-11.307 25.254-25.254 0-10.107-5.94-18.823-14.517-22.859z" fill="#353535e6"/>
    <circle cx="256" cy="479.246" fill="#353535e6" r="25.254"/>
    <path d="m266.737 456.387c1.534 3.259 2.395 6.897 2.395 10.737 0 13.947-11.307 25.254-25.254 25.254-3.84 0-7.478-.861-10.737-2.395 4.036 8.577 12.752 14.517 22.859 14.517 13.947 0 25.254-11.307 25.254-25.254 0-10.107-5.94-18.823-14.517-22.859z" fill="#353535e6"/>
    <circle cx="32.754" cy="256" fill="#353535e6" r="25.254"/>
    <path d="m43.491 233.141c1.534 3.259 2.395 6.897 2.395 10.737 0 13.947-11.307 25.254-25.254 25.254-3.84 0-7.478-.861-10.737-2.395 4.036 8.577 12.752 14.517 22.859 14.517 13.947 0 25.254-11.307 25.254-25.254 0-10.107-5.939-18.823-14.517-22.859z" fill="#353535e6"/>
    <circle cx="479.246" cy="32.754" fill="#353535e6" r="25.254"/>
    <path d="m456.387 43.491c3.259 1.534 6.897 2.395 10.737 2.395 13.947 0 25.254-11.307 25.254-25.254 0-3.84-.861-7.478-2.395-10.737 8.577 4.036 14.517 12.752 14.517 22.859 0 13.947-11.307 25.254-25.254 25.254-10.107 0-18.823-5.939-22.859-14.517z" fill="#353535e6"/>
    <circle cx="32.754" cy="479.246" fill="#353535e6" r="25.254"/>
    <path d="m9.895 489.983c3.259 1.534 6.897 2.395 10.737 2.395 13.947 0 25.254-11.307 25.254-25.254 0-3.84-.861-7.478-2.395-10.737 8.577 4.036 14.517 12.752 14.517 22.859 0 13.947-11.307 25.254-25.254 25.254-10.107 0-18.823-5.94-22.859-14.517z" fill="#353535e6"/>
    <circle cx="479.246" cy="479.246" fill="#353535e6" r="25.254"/>
    <path d="m489.983 456.387c1.534 3.259 2.395 6.897 2.395 10.737 0 13.947-11.307 25.254-25.254 25.254-3.84 0-7.478-.861-10.737-2.395 4.036 8.577 12.752 14.517 22.859 14.517 13.947 0 25.254-11.307 25.254-25.254 0-10.107-5.94-18.823-14.517-22.859z" fill="#353535e6"/>
    <path d="m484.487 288.329c15.577-2.516 27.513-16.052 27.513-32.329s-11.936-29.813-27.513-32.329c-6.587-46.771-27.714-90.842-60.112-125.438l37.64-37.64c5.009 3.112 10.913 4.915 17.231 4.915 18.061 0 32.754-14.693 32.754-32.754s-14.693-32.754-32.754-32.754-32.754 14.693-32.754 32.754c0 6.319 1.803 12.222 4.915 17.231l-37.64 37.64c-34.596-32.398-78.666-53.525-125.438-60.112-2.516-15.577-16.052-27.513-32.329-27.513s-29.813 11.936-32.329 27.513c-46.772 6.587-90.842 27.714-125.438 60.113l-37.64-37.64c3.112-5.009 4.916-10.913 4.916-17.231-.001-18.062-14.694-32.755-32.755-32.755s-32.754 14.693-32.754 32.754 14.693 32.754 32.754 32.754c6.319 0 12.222-1.803 17.232-4.916l37.64 37.64c-32.398 34.596-53.526 78.667-60.112 125.438-15.578 2.517-27.514 16.053-27.514 32.33s11.936 29.813 27.513 32.329c6.586 46.771 27.714 90.842 60.112 125.438l-37.64 37.64c-5.01-3.112-10.913-4.916-17.232-4.916-18.06.001-32.753 14.695-32.753 32.755s14.693 32.754 32.754 32.754 32.754-14.693 32.754-32.754c0-6.319-1.803-12.222-4.916-17.231l37.64-37.64c34.596 32.398 78.667 53.526 125.438 60.112 2.517 15.577 16.053 27.513 32.33 27.513s29.813-11.936 32.329-27.513c46.771-6.587 90.842-27.714 125.438-60.112l37.64 37.64c-3.112 5.01-4.915 10.913-4.915 17.231 0 18.061 14.693 32.754 32.754 32.754s32.754-14.693 32.754-32.754-14.693-32.754-32.754-32.754c-6.319 0-12.222 1.803-17.231 4.915l-37.64-37.64c32.398-34.596 53.525-78.666 60.112-125.438zm-228.487 158.163c-14.662 0-27.104 9.684-31.268 22.992-93.487-13.637-168.579-88.73-182.216-182.216 13.308-4.164 22.992-16.606 22.992-31.268s-9.684-27.104-22.992-31.268c13.637-93.486 88.73-168.579 182.216-182.216 4.164 13.308 16.606 22.992 31.268 22.992s27.104-9.684 31.268-22.992c93.486 13.636 168.58 88.73 182.216 182.216-13.308 4.164-22.992 16.606-22.992 31.268s9.684 27.104 22.992 31.268c-13.636 93.486-88.73 168.58-182.216 182.216-4.164-13.308-16.606-22.992-31.268-22.992zm241-190.492c0 9.789-7.965 17.754-17.754 17.754s-17.754-7.965-17.754-17.754 7.965-17.754 17.754-17.754 17.754 7.965 17.754 17.754zm-17.754-241c9.789 0 17.754 7.965 17.754 17.754s-7.965 17.754-17.754 17.754-17.754-7.965-17.754-17.754 7.965-17.754 17.754-17.754zm-223.246 0c9.789 0 17.754 7.965 17.754 17.754s-7.965 17.754-17.754 17.754c-9.79 0-17.754-7.965-17.754-17.754s7.964-17.754 17.754-17.754zm-241 17.754c0-9.789 7.964-17.754 17.754-17.754s17.754 7.965 17.754 17.754-7.964 17.754-17.754 17.754-17.754-7.965-17.754-17.754zm0 223.246c0-9.789 7.964-17.754 17.754-17.754s17.754 7.965 17.754 17.754-7.964 17.754-17.754 17.754-17.754-7.965-17.754-17.754zm17.754 241c-9.79 0-17.754-7.965-17.754-17.754s7.964-17.754 17.754-17.754 17.754 7.965 17.754 17.754-7.964 17.754-17.754 17.754zm223.246 0c-9.79 0-17.754-7.965-17.754-17.754s7.964-17.754 17.754-17.754c9.789 0 17.754 7.965 17.754 17.754s-7.965 17.754-17.754 17.754zm241-17.754c0 9.789-7.965 17.754-17.754 17.754s-17.754-7.965-17.754-17.754 7.965-17.754 17.754-17.754 17.754 7.965 17.754 17.754z"/>
    <path d="m403.214 309.979c-3.815-1.61-8.215.175-9.828 3.99-4.873 11.534-11.089 22.203-18.395 31.89-12.046-7.98-25.116-14.673-38.9-19.989 4.829-19.36 7.612-40.483 8.13-62.37h60.659c-.305 6.129-.974 12.233-2.016 18.225-.709 4.08 2.024 7.964 6.105 8.674.435.075.866.111 1.293.111 3.578 0 6.746-2.57 7.381-6.217 1.612-9.279 2.431-18.798 2.431-28.293 0-39.423-13.979-75.639-37.236-103.962-.084-.135-.165-.272-.26-.403-.325-.453-.694-.855-1.093-1.212-30.12-35.745-75.192-58.498-125.485-58.498-56.892 0-108.908 28.819-139.145 77.092-2.199 3.511-1.136 8.139 2.375 10.338 3.512 2.197 8.14 1.135 10.337-2.375 2.344-3.742 4.842-7.344 7.464-10.824 12.04 7.973 25.102 14.661 38.877 19.974-4.829 19.36-7.612 40.483-8.13 62.37h-60.661c.701-14.183 3.387-28.091 8.024-41.44 1.359-3.912-.71-8.187-4.624-9.546-3.909-1.36-8.186.71-9.545 4.624-6.004 17.281-9.048 35.403-9.048 53.862 0 39.423 13.979 75.641 37.237 103.964.084.135.165.271.259.402.325.453.694.854 1.092 1.212 30.122 35.745 75.194 58.498 125.487 58.498 66.12 0 125.471-39.357 151.204-100.269 1.612-3.816-.174-8.216-3.989-9.828zm-81.339 10.971c-18.646-5.728-38.336-9.028-58.375-9.689v-47.761h65.72c-.499 20.193-3.009 39.637-7.345 57.45zm-214.762-57.45h60.665c.518 21.887 3.301 43.011 8.13 62.37-13.752 5.304-26.794 11.978-38.818 19.934-17.51-23.128-28.443-51.498-29.977-82.304zm75.668 0h65.719v47.761c-20.039.661-39.729 3.961-58.375 9.689-4.335-17.813-6.845-37.257-7.344-57.45zm65.719 62.766v77.995c-15.905-3.423-30.944-17.669-42.979-40.986-4.389-8.503-8.175-17.872-11.349-27.889 17.329-5.357 35.655-8.462 54.328-9.12zm15 77.995v-77.995c18.673.658 36.999 3.763 54.328 9.121-3.174 10.017-6.96 19.386-11.349 27.889-12.035 23.316-27.074 37.562-42.979 40.985zm42.979-255.536c4.389 8.503 8.175 17.871 11.349 27.888-17.329 5.358-35.655 8.463-54.328 9.121v-77.995c15.905 3.423 30.944 17.669 42.979 40.986zm-57.979-40.986v77.995c-18.673-.658-36.999-3.763-54.328-9.121 3.174-10.017 6.96-19.386 11.349-27.889 12.035-23.316 27.074-37.562 42.979-40.985zm15 93c20.039-.661 39.729-3.961 58.375-9.689 4.335 17.813 6.846 37.257 7.345 57.45h-65.72zm141.387 47.761h-60.665c-.518-21.887-3.301-43.011-8.13-62.371 13.752-5.304 26.794-11.978 38.818-19.933 17.51 23.128 28.443 51.498 29.977 82.304zm-39.693-93.872c-10.343 6.702-21.484 12.398-33.206 17.015-3.404-10.679-7.474-20.682-12.18-29.798-5.761-11.162-12.251-20.582-19.292-28.13 25.032 7.848 47.237 22.138 64.678 40.913zm-218.49-.065c17.769-19.22 40.102-33.249 64.851-40.923-7.069 7.561-13.583 17.005-19.363 28.205-4.705 9.117-8.776 19.119-12.18 29.799-11.76-4.633-22.936-10.351-33.308-17.081zm43.421 36.487c18.646 5.728 38.335 9.028 58.375 9.689v47.761h-65.719c.499-20.193 3.009-39.637 7.344-57.45zm-43.319 166.322c10.343-6.702 21.484-12.399 33.206-17.016 3.404 10.679 7.474 20.682 12.18 29.799 5.761 11.162 12.25 20.582 19.291 28.13-25.031-7.848-47.235-22.138-64.677-40.913zm153.689 40.936c7.049-7.552 13.546-16.979 19.313-28.152 4.705-9.117 8.776-19.119 12.18-29.799 11.76 4.632 22.936 10.35 33.308 17.081-17.636 19.017-39.965 33.131-64.801 40.87z"/>
</svg>`,
        `<svg height="512" viewBox="0 0 32 32" width="512" xmlns="http://www.w3.org/2000/svg">
    <g id="Ikon">
        <circle cx="16" cy="16" fill="#35353580" r="14"/>
        <circle cx="16" cy="16" fill="#353535" r="5"/>
    </g>
</svg>`,
        `<svg fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <g clip-rule="evenodd" fill-rule="evenodd">
        <path d="m12 10.625a.375.375 0 1 0 0 .75.375.375 0 0 0 0-.75zm-1.625.375a1.625 1.625 0 1 1 3.25 0 1.625 1.625 0 0 1 -3.25 0z" fill="#353535e6"/>
        <path d="m12 11.375c.345 0 .625.28.625.625v8a.625.625 0 1 1 -1.25 0v-8c0-.345.28-.625.625-.625z" fill="#353535e6"/>
        <g fill="#353535e6">
            <path d="m12 8.625a2.375 2.375 0 0 0 -2.375 2.375c0 .695.305 1.317.793 1.756a.625.625 0 0 1 -.836.93 3.604 3.604 0 0 1 -1.207-2.686 3.625 3.625 0 1 1 7.25 0 3.604 3.604 0 0 1 -1.207 2.686.625.625 0 0 1 -.836-.93 2.353 2.353 0 0 0 .793-1.756 2.375 2.375 0 0 0 -2.375-2.375z"/>
            <path d="m12 6.625a4.373 4.373 0 0 0 -1.75 8.38.625.625 0 0 1 -.5 1.146 5.623 5.623 0 0 1 2.25-10.776 5.623 5.623 0 0 1 2.25 10.776.625.625 0 0 1 -.5-1.146 4.372 4.372 0 0 0 -1.75-8.38z"/>
            <path d="m4.375 11a7.625 7.625 0 1 1 15.25 0 7.625 7.625 0 0 1 -5.447 7.305.625.625 0 0 1 -.356-1.198 6.375 6.375 0 1 0 -3.644 0 .625.625 0 0 1 -.356 1.198 7.625 7.625 0 0 1 -5.447-7.305z"/>
        </g>
    </g>
</svg>`,
    ];

    var icons = [];
    svgDataArray.forEach((svgData, index) => {
        var icon = new Image();
        icon.src = 'data:image/svg+xml;base64,' + btoa(svgData);
        icons.push(icon);
    });

    // Ensure all icons are loaded before starting the animation
    var iconsLoaded = 0;
    icons.forEach(icon => {
        icon.onload = function () {
            iconsLoaded++;
            if (iconsLoaded === icons.length) {
                // Initialize canvas and balls once all icons are loaded
                initCanvas();
                initBalls(BALL_NUM);
                window.requestAnimationFrame(render);
            }
        };
    });

    // Random speed
    function getRandomSpeed(pos) {
        var min = -1,
            max = 1;
        switch (pos) {
            case 'top':
                return [randomNumFrom(min, max), randomNumFrom(0.1, max)];
            case 'right':
                return [randomNumFrom(min, -0.1), randomNumFrom(min, max)];
            case 'bottom':
                return [randomNumFrom(min, max), randomNumFrom(min, -0.1)];
            case 'left':
                return [randomNumFrom(0.1, max), randomNumFrom(min, max)];
            default:
                return;
        }
    }

    function randomArrayItem(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
    }

    function randomNumFrom(min, max) {
        return Math.random() * (max - min) + min;
    }

    function getRandomBall() {
        var pos = randomArrayItem(['top', 'right', 'bottom', 'left']);
        var randomIcon = randomArrayItem(icons);
        switch (pos) {
            case 'top':
                return {
                    x: randomSidePos(can_w),
                    y: -R,
                    vx: getRandomSpeed('top')[0],
                    vy: getRandomSpeed('top')[1],
                    r: R,
                    alpha: 1,
                    phase: randomNumFrom(0, 10),
                    icon: randomIcon
                }
            case 'right':
                return {
                    x: can_w + R,
                    y: randomSidePos(can_h),
                    vx: getRandomSpeed('right')[0],
                    vy: getRandomSpeed('right')[1],
                    r: R,
                    alpha: 1,
                    phase: randomNumFrom(0, 10),
                    icon: randomIcon
                }
            case 'bottom':
                return {
                    x: randomSidePos(can_w),
                    y: can_h + R,
                    vx: getRandomSpeed('bottom')[0],
                    vy: getRandomSpeed('bottom')[1],
                    r: R,
                    alpha: 1,
                    phase: randomNumFrom(0, 10),
                    icon: randomIcon
                }
            case 'left':
                return {
                    x: -R,
                    y: randomSidePos(can_h),
                    vx: getRandomSpeed('left')[0],
                    vy: getRandomSpeed('left')[1],
                    r: R,
                    alpha: 1,
                    phase: randomNumFrom(0, 10),
                    icon: randomIcon
                }
        }
    }

    function randomSidePos(length) {
        return Math.ceil(Math.random() * length);
    }

    // Draw Ball
    function renderBalls() {
        Array.prototype.forEach.call(balls, function (b) {
            if (!b.hasOwnProperty('type')) {
                ctx.globalAlpha = b.alpha;
                ctx.drawImage(b.icon, b.x - R, b.y - R, R * 2, R * 2);
                ctx.globalAlpha = 1;
            }
        });
    }

    // Update balls
    function updateBalls() {
        var new_balls = [];
        Array.prototype.forEach.call(balls, function (b) {
            b.x += b.vx;
            b.y += b.vy;

            if (b.x > -(50) && b.x < (can_w + 50) && b.y > -(50) && b.y < (can_h + 50)) {
                new_balls.push(b);
            }

            // alpha change
            b.phase += alpha_f;
            b.alpha = Math.abs(Math.cos(b.phase));
        });

        balls = new_balls.slice(0);
    }

    // Draw lines
    function renderLines() {
        var fraction, alpha;
        for (var i = 0; i < balls.length; i++) {
            for (var j = i + 1; j < balls.length; j++) {

                fraction = getDisOf(balls[i], balls[j]) / dis_limit;

                if (fraction < 1) {
                    alpha = (1 - fraction).toString();

                    ctx.strokeStyle = 'rgba(255,255,255,' + alpha + ')';
                    ctx.lineWidth = link_line_width;

                    ctx.beginPath();
                    ctx.moveTo(balls[i].x, balls[i].y);
                    ctx.lineTo(balls[j].x, balls[j].y);
                    ctx.stroke();
                    ctx.closePath();
                }
            }
        }
    }

    function getDisOf(b1, b2) {
        var delta_x = Math.abs(b1.x - b2.x),
            delta_y = Math.abs(b1.y - b2.y);

        return Math.sqrt(delta_x * delta_x + delta_y * delta_y);
    }

    function addBallIfy() {
        if (balls.length < BALL_NUM) {
            balls.push(getRandomBall());
        }
    }

    function render() {
        ctx.clearRect(0, 0, can_w, can_h);

        renderBalls();

        renderLines();

        updateBalls();

        addBallIfy();

        window.requestAnimationFrame(render);
    }

    function initBalls(num) {
        for (var i = 1; i <= num; i++) {
            balls.push({
                x: randomSidePos(can_w),
                y: randomSidePos(can_h),
                vx: getRandomSpeed('top')[0],
                vy: getRandomSpeed('top')[1],
                r: R,
                alpha: 1,
                phase: randomNumFrom(0, 10),
                icon: randomArrayItem(icons)
            });
        }
    }

    function initCanvas() {
        canvas.setAttribute('width', window.innerWidth);
        canvas.setAttribute('height', window.innerHeight);

        can_w = parseInt(canvas.getAttribute('width'));
        can_h = parseInt(canvas.getAttribute('height'));
    }

    window.addEventListener('resize', function (e) {
        initCanvas();
    });

    canvas.addEventListener('mouseenter', function () {
        mouse_in = true;
        balls.push(mouse_ball);
    });
    canvas.addEventListener('mouseleave', function () {
        mouse_in = false;
        var new_balls = [];
        Array.prototype.forEach.call(balls, function (b) {
            if (!b.hasOwnProperty('type')) {
                new_balls.push(b);
            }
        });
        balls = new_balls.slice(0);
    });
    canvas.addEventListener('mousemove', function (e) {
        var e = e || window.event;
        mouse_ball.x = e.pageX;
        mouse_ball.y = e.pageY;
    });
});

// Character Moving Start
$(document).ready(function () {
    document.addEventListener("mousemove", parallax);

    function parallax(e) {
        var elements = document.querySelectorAll(".character img");

        // Custom scale values for each element
        var scaleValues = [0.285, 0.25, 0.25, 0.25, 0.25, 0.3875, 0.25]; // Example scale values for 7 elements

        elements.forEach(function (element, index) {
            var movingValue = parseFloat(element.getAttribute("data-value")); // Retrieve custom data-value as a float

            // Ensure index is within bounds of scaleValues array
            var scaleIndex = index % scaleValues.length;
            var scale = scaleValues[scaleIndex];

            var x = (e.clientX * movingValue) / 50;
            var y = (e.clientY * movingValue) / 50;

            element.style.transform = "translateX(" + x + "px) translateY(" + y + "px) scale(" + scale + ")";
        });
    }
});

// Site Loder Js
$(document).ready(function () {
    // Function to calculate loading time
    function getLoadingTime() {
        const timing = window.performance.timing;
        const loadTime = timing.loadEventEnd - timing.navigationStart;
        return loadTime;
    }

    // Function to display loading time in loader
    function displayLoadingTime() {
        const loader = document.getElementById('loader');
        const loadTime = getLoadingTime();

        // Set animation duration for 'dis' class elements
        const disElements = document.querySelectorAll('.dis');
        disElements.forEach(element => {
            element.style.animationDuration = loadTime + 'ms';
        });

        // Set half of the loadTime for specific classes
        const halfLoadTime = loadTime / 2;
        const classesToAdjust = ['.ic', '.yazi_k', '.yazi_risk', '.yazi_24'];

        classesToAdjust.forEach(className => {
            const elements = document.querySelectorAll(className);
            elements.forEach(element => {
                element.style.animationDuration = halfLoadTime + 'ms';
            });
        });

        // Hide the loader
        loader.style.display = 'none';
    }

    // Wait for the window to fully load before displaying the loading time
    window.addEventListener('load', function () {
        displayLoadingTime();
    });
});

$(document).ready(function () {
    // put the animation on load, otherwise it bugs out
    window.addEventListener('load', () => {
        initFluid();
    });

    const initFluid = () => {

        // anim setup || in an active project you can set this to the html body. however ive found a bound box to the viewport looks + performs better
        const canvas = document.getElementById('fluid');
        resizeCanvas();

        let config = {
            SIM_RESOLUTION: 128,
            DYE_RESOLUTION: 1440,
            CAPTURE_RESOLUTION: 512,
            DENSITY_DISSIPATION: 3.5,
            VELOCITY_DISSIPATION: 2,
            PRESSURE: 0.1,
            PRESSURE_ITERATIONS: 20,
            CURL: 3,
            SPLAT_RADIUS: 0.2,
            SPLAT_FORCE: 6000,
            SHADING: true,
            COLOR_UPDATE_SPEED: 10,
            PAUSED: false,
            BACK_COLOR: { r: 0, g: 0, b: 0 },
            TRANSPARENT: true,
        }

        function pointerPrototype() {
            this.id = -1;
            this.texcoordX = 0;
            this.texcoordY = 0;
            this.prevTexcoordX = 0;
            this.prevTexcoordY = 0;
            this.deltaX = 0;
            this.deltaY = 0;
            this.down = false;
            this.moved = false;
            this.color = [30, 0, 300];
        }

        let pointers = [];
        pointers.push(new pointerPrototype());

        const { gl, ext } = getWebGLContext(canvas);

        if (!ext.supportLinearFiltering) {
            config.DYE_RESOLUTION = 512;
            config.SHADING = false;
        }

        function getWebGLContext(canvas) {
            const params = { alpha: true, depth: false, stencil: false, antialias: false, preserveDrawingBuffer: false };

            let gl = canvas.getContext('webgl2', params);
            const isWebGL2 = !!gl;
            if (!isWebGL2)
                gl = canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);

            let halfFloat;
            let supportLinearFiltering;
            if (isWebGL2) {
                gl.getExtension('EXT_color_buffer_float');
                supportLinearFiltering = gl.getExtension('OES_texture_float_linear');
            } else {
                halfFloat = gl.getExtension('OES_texture_half_float');
                supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');
            }

            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;
            let formatRGBA;
            let formatRG;
            let formatR;

            if (isWebGL2) {
                formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);
                formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);
                formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);
            }
            else {
                formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);
                formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);
                formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);
            }

            return {
                gl,
                ext: {
                    formatRGBA,
                    formatRG,
                    formatR,
                    halfFloatTexType,
                    supportLinearFiltering
                }
            };
        }

        function getSupportedFormat(gl, internalFormat, format, type) {
            if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {
                switch (internalFormat) {
                    case gl.R16F:
                        return getSupportedFormat(gl, gl.RG16F, gl.RG, type);
                    case gl.RG16F:
                        return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);
                    default:
                        return null;
                }
            }

            return {
                internalFormat,
                format
            }
        }

        function supportRenderTextureFormat(gl, internalFormat, format, type) {
            let texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);

            let fbo = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);

            let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
            return status == gl.FRAMEBUFFER_COMPLETE;
        }

        class Material {
            constructor(vertexShader, fragmentShaderSource) {
                this.vertexShader = vertexShader;
                this.fragmentShaderSource = fragmentShaderSource;
                this.programs = [];
                this.activeProgram = null;
                this.uniforms = [];
            }

            setKeywords(keywords) {
                let hash = 0;
                for (let i = 0; i < keywords.length; i++)
                    hash += hashCode(keywords[i]);

                let program = this.programs[hash];
                if (program == null) {
                    let fragmentShader = compileShader(gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);
                    program = createProgram(this.vertexShader, fragmentShader);
                    this.programs[hash] = program;
                }

                if (program == this.activeProgram) return;

                this.uniforms = getUniforms(program);
                this.activeProgram = program;
            }

            bind() {
                gl.useProgram(this.activeProgram);
            }
        }

        class Program {
            constructor(vertexShader, fragmentShader) {
                this.uniforms = {};
                this.program = createProgram(vertexShader, fragmentShader);
                this.uniforms = getUniforms(this.program);
            }

            bind() {
                gl.useProgram(this.program);
            }
        }

        function createProgram(vertexShader, fragmentShader) {
            let program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS))
                console.trace(gl.getProgramInfoLog(program));

            return program;
        }

        function getUniforms(program) {
            let uniforms = [];
            let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
            for (let i = 0; i < uniformCount; i++) {
                let uniformName = gl.getActiveUniform(program, i).name;
                uniforms[uniformName] = gl.getUniformLocation(program, uniformName);
            }
            return uniforms;
        }

        function compileShader(type, source, keywords) {
            source = addKeywords(source, keywords);

            const shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
                console.trace(gl.getShaderInfoLog(shader));

            return shader;

        };

        function addKeywords(source, keywords) {
            if (keywords == null) return source;
            let keywordsString = '';
            keywords.forEach(keyword => {
                keywordsString += '#define ' + keyword + '\n';
            });

            return keywordsString + source;
        }

        const baseVertexShader = compileShader(gl.VERTEX_SHADER, `
      precision highp float;
  
      attribute vec2 aPosition;
      varying vec2 vUv;
      varying vec2 vL;
      varying vec2 vR;
      varying vec2 vT;
      varying vec2 vB;
      uniform vec2 texelSize;
  
      void main () {
          vUv = aPosition * 0.5 + 0.5;
          vL = vUv - vec2(texelSize.x, 0.0);
          vR = vUv + vec2(texelSize.x, 0.0);
          vT = vUv + vec2(0.0, texelSize.y);
          vB = vUv - vec2(0.0, texelSize.y);
          gl_Position = vec4(aPosition, 0.0, 1.0);
      }
  `);

        const blurVertexShader = compileShader(gl.VERTEX_SHADER, `
      precision highp float;
  
      attribute vec2 aPosition;
      varying vec2 vUv;
      varying vec2 vL;
      varying vec2 vR;
      uniform vec2 texelSize;
  
      void main () {
          vUv = aPosition * 0.5 + 0.5;
          float offset = 1.33333333;
          vL = vUv - texelSize * offset;
          vR = vUv + texelSize * offset;
          gl_Position = vec4(aPosition, 0.0, 1.0);
      }
  `);

        const blurShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying vec2 vUv;
      varying vec2 vL;
      varying vec2 vR;
      uniform sampler2D uTexture;
  
      void main () {
          vec4 sum = texture2D(uTexture, vUv) * 0.29411764;
          sum += texture2D(uTexture, vL) * 0.35294117;
          sum += texture2D(uTexture, vR) * 0.35294117;
          gl_FragColor = sum;
      }
  `);

        const copyShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying highp vec2 vUv;
      uniform sampler2D uTexture;
  
      void main () {
          gl_FragColor = texture2D(uTexture, vUv);
      }
  `);

        const clearShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying highp vec2 vUv;
      uniform sampler2D uTexture;
      uniform float value;
  
      void main () {
          gl_FragColor = value * texture2D(uTexture, vUv);
      }
  `);

        const colorShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
  
      uniform vec4 color;
  
      void main () {
          gl_FragColor = color;
      }
  `);


        const displayShaderSource = `
      precision highp float;
      precision highp sampler2D;
  
      varying vec2 vUv;
      varying vec2 vL;
      varying vec2 vR;
      varying vec2 vT;
      varying vec2 vB;
      uniform sampler2D uTexture;
      uniform sampler2D uDithering;
      uniform vec2 ditherScale;
      uniform vec2 texelSize;
  
      vec3 linearToGamma (vec3 color) {
          color = max(color, vec3(0));
          return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));
      }
  
      void main () {
          vec3 c = texture2D(uTexture, vUv).rgb;
  
      #ifdef SHADING
          vec3 lc = texture2D(uTexture, vL).rgb;
          vec3 rc = texture2D(uTexture, vR).rgb;
          vec3 tc = texture2D(uTexture, vT).rgb;
          vec3 bc = texture2D(uTexture, vB).rgb;
  
          float dx = length(rc) - length(lc);
          float dy = length(tc) - length(bc);
  
          vec3 n = normalize(vec3(dx, dy, length(texelSize)));
          vec3 l = vec3(0.0, 0.0, 1.0);
  
          float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);
          c *= diffuse;
      #endif
  
          float a = max(c.r, max(c.g, c.b));
          gl_FragColor = vec4(c, a);
      }
  `;

        const splatShader = compileShader(gl.FRAGMENT_SHADER, `
      precision highp float;
      precision highp sampler2D;
  
      varying vec2 vUv;
      uniform sampler2D uTarget;
      uniform float aspectRatio;
      uniform vec3 color;
      uniform vec2 point;
      uniform float radius;
  
      void main () {
          vec2 p = vUv - point.xy;
          p.x *= aspectRatio;
          vec3 splat = exp(-dot(p, p) / radius) * color;
          vec3 base = texture2D(uTarget, vUv).xyz;
          gl_FragColor = vec4(base + splat, 1.0);
      }
  `);

        const advectionShader = compileShader(gl.FRAGMENT_SHADER, `
      precision highp float;
      precision highp sampler2D;
  
      varying vec2 vUv;
      uniform sampler2D uVelocity;
      uniform sampler2D uSource;
      uniform vec2 texelSize;
      uniform vec2 dyeTexelSize;
      uniform float dt;
      uniform float dissipation;
  
      vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {
          vec2 st = uv / tsize - 0.5;
  
          vec2 iuv = floor(st);
          vec2 fuv = fract(st);
  
          vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);
          vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);
          vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);
          vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);
  
          return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);
      }
  
      void main () {
      #ifdef MANUAL_FILTERING
          vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;
          vec4 result = bilerp(uSource, coord, dyeTexelSize);
      #else
          vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;
          vec4 result = texture2D(uSource, coord);
      #endif
          float decay = 1.0 + dissipation * dt;
          gl_FragColor = result / decay;
      }`,
            ext.supportLinearFiltering ? null : ['MANUAL_FILTERING']
        );

        const divergenceShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying highp vec2 vUv;
      varying highp vec2 vL;
      varying highp vec2 vR;
      varying highp vec2 vT;
      varying highp vec2 vB;
      uniform sampler2D uVelocity;
  
      void main () {
          float L = texture2D(uVelocity, vL).x;
          float R = texture2D(uVelocity, vR).x;
          float T = texture2D(uVelocity, vT).y;
          float B = texture2D(uVelocity, vB).y;
  
          vec2 C = texture2D(uVelocity, vUv).xy;
          if (vL.x < 0.0) { L = -C.x; }
          if (vR.x > 1.0) { R = -C.x; }
          if (vT.y > 1.0) { T = -C.y; }
          if (vB.y < 0.0) { B = -C.y; }
  
          float div = 0.5 * (R - L + T - B);
          gl_FragColor = vec4(div, 0.0, 0.0, 1.0);
      }
  `);

        const curlShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying highp vec2 vUv;
      varying highp vec2 vL;
      varying highp vec2 vR;
      varying highp vec2 vT;
      varying highp vec2 vB;
      uniform sampler2D uVelocity;
  
      void main () {
          float L = texture2D(uVelocity, vL).y;
          float R = texture2D(uVelocity, vR).y;
          float T = texture2D(uVelocity, vT).x;
          float B = texture2D(uVelocity, vB).x;
          float vorticity = R - L - T + B;
          gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);
      }
  `);

        const vorticityShader = compileShader(gl.FRAGMENT_SHADER, `
      precision highp float;
      precision highp sampler2D;
  
      varying vec2 vUv;
      varying vec2 vL;
      varying vec2 vR;
      varying vec2 vT;
      varying vec2 vB;
      uniform sampler2D uVelocity;
      uniform sampler2D uCurl;
      uniform float curl;
      uniform float dt;
  
      void main () {
          float L = texture2D(uCurl, vL).x;
          float R = texture2D(uCurl, vR).x;
          float T = texture2D(uCurl, vT).x;
          float B = texture2D(uCurl, vB).x;
          float C = texture2D(uCurl, vUv).x;
  
          vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));
          force /= length(force) + 0.0001;
          force *= curl * C;
          force.y *= -1.0;
  
          vec2 velocity = texture2D(uVelocity, vUv).xy;
          velocity += force * dt;
          velocity = min(max(velocity, -1000.0), 1000.0);
          gl_FragColor = vec4(velocity, 0.0, 1.0);
      }
  `);

        const pressureShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying highp vec2 vUv;
      varying highp vec2 vL;
      varying highp vec2 vR;
      varying highp vec2 vT;
      varying highp vec2 vB;
      uniform sampler2D uPressure;
      uniform sampler2D uDivergence;
  
      void main () {
          float L = texture2D(uPressure, vL).x;
          float R = texture2D(uPressure, vR).x;
          float T = texture2D(uPressure, vT).x;
          float B = texture2D(uPressure, vB).x;
          float C = texture2D(uPressure, vUv).x;
          float divergence = texture2D(uDivergence, vUv).x;
          float pressure = (L + R + B + T - divergence) * 0.25;
          gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);
      }
  `);

        const gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, `
      precision mediump float;
      precision mediump sampler2D;
  
      varying highp vec2 vUv;
      varying highp vec2 vL;
      varying highp vec2 vR;
      varying highp vec2 vT;
      varying highp vec2 vB;
      uniform sampler2D uPressure;
      uniform sampler2D uVelocity;
  
      void main () {
          float L = texture2D(uPressure, vL).x;
          float R = texture2D(uPressure, vR).x;
          float T = texture2D(uPressure, vT).x;
          float B = texture2D(uPressure, vB).x;
          vec2 velocity = texture2D(uVelocity, vUv).xy;
          velocity.xy -= vec2(R - L, T - B);
          gl_FragColor = vec4(velocity, 0.0, 1.0);
      }
  `);

        const blit = (() => {
            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);
            gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
            gl.enableVertexAttribArray(0);

            return (target, clear = false) => {
                if (target == null) {
                    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                }
                else {
                    gl.viewport(0, 0, target.width, target.height);
                    gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);
                }
                if (clear) {
                    gl.clearColor(0.0, 0.0, 0.0, 1.0);
                    gl.clear(gl.COLOR_BUFFER_BIT);
                }
                // CHECK_FRAMEBUFFER_STATUS();
                gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
            }
        })();

        function CHECK_FRAMEBUFFER_STATUS() {
            let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
            if (status != gl.FRAMEBUFFER_COMPLETE)
                console.trace("Framebuffer error: " + status);
        }

        let dye;
        let velocity;
        let divergence;
        let curl;
        let pressure;
        let ditheringTexture = createTextureAsync('./app/themes/flipp/dist/images/LDR_LLL1_0.png');

        const blurProgram = new Program(blurVertexShader, blurShader);
        const copyProgram = new Program(baseVertexShader, copyShader);
        const clearProgram = new Program(baseVertexShader, clearShader);
        const colorProgram = new Program(baseVertexShader, colorShader);
        const splatProgram = new Program(baseVertexShader, splatShader);
        const advectionProgram = new Program(baseVertexShader, advectionShader);
        const divergenceProgram = new Program(baseVertexShader, divergenceShader);
        const curlProgram = new Program(baseVertexShader, curlShader);
        const vorticityProgram = new Program(baseVertexShader, vorticityShader);
        const pressureProgram = new Program(baseVertexShader, pressureShader);
        const gradienSubtractProgram = new Program(baseVertexShader, gradientSubtractShader);

        const displayMaterial = new Material(baseVertexShader, displayShaderSource);

        function initFramebuffers() {
            let simRes = getResolution(config.SIM_RESOLUTION);
            let dyeRes = getResolution(config.DYE_RESOLUTION);

            const texType = ext.halfFloatTexType;
            const rgba = ext.formatRGBA;
            const rg = ext.formatRG;
            const r = ext.formatR;
            const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;

            gl.disable(gl.BLEND);

            if (dye == null)
                dye = createDoubleFBO(dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);
            else
                dye = resizeDoubleFBO(dye, dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);

            if (velocity == null)
                velocity = createDoubleFBO(simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);
            else
                velocity = resizeDoubleFBO(velocity, simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);

            divergence = createFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);
            curl = createFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);
            pressure = createDoubleFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);

        }

        function createFBO(w, h, internalFormat, format, type, param) {
            gl.activeTexture(gl.TEXTURE0);
            let texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);

            let fbo = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            gl.viewport(0, 0, w, h);
            gl.clear(gl.COLOR_BUFFER_BIT);

            let texelSizeX = 1.0 / w;
            let texelSizeY = 1.0 / h;

            return {
                texture,
                fbo,
                width: w,
                height: h,
                texelSizeX,
                texelSizeY,
                attach(id) {
                    gl.activeTexture(gl.TEXTURE0 + id);
                    gl.bindTexture(gl.TEXTURE_2D, texture);
                    return id;
                }
            };
        }

        function createDoubleFBO(w, h, internalFormat, format, type, param) {
            let fbo1 = createFBO(w, h, internalFormat, format, type, param);
            let fbo2 = createFBO(w, h, internalFormat, format, type, param);

            return {
                width: w,
                height: h,
                texelSizeX: fbo1.texelSizeX,
                texelSizeY: fbo1.texelSizeY,
                get read() {
                    return fbo1;
                },
                set read(value) {
                    fbo1 = value;
                },
                get write() {
                    return fbo2;
                },
                set write(value) {
                    fbo2 = value;
                },
                swap() {
                    let temp = fbo1;
                    fbo1 = fbo2;
                    fbo2 = temp;
                }
            }
        }

        function resizeFBO(target, w, h, internalFormat, format, type, param) {
            let newFBO = createFBO(w, h, internalFormat, format, type, param);
            copyProgram.bind();
            gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));
            blit(newFBO);
            return newFBO;
        }

        function resizeDoubleFBO(target, w, h, internalFormat, format, type, param) {
            if (target.width == w && target.height == h)
                return target;
            target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);
            target.write = createFBO(w, h, internalFormat, format, type, param);
            target.width = w;
            target.height = h;
            target.texelSizeX = 1.0 / w;
            target.texelSizeY = 1.0 / h;
            return target;
        }

        function createTextureAsync(url) {
            let texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255]));

            let obj = {
                texture,
                width: 1,
                height: 1,
                attach(id) {
                    gl.activeTexture(gl.TEXTURE0 + id);
                    gl.bindTexture(gl.TEXTURE_2D, texture);
                    return id;
                }
            };

            let image = new Image();
            image.onload = () => {
                obj.width = image.width;
                obj.height = image.height;
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);
            };
            image.src = url;

            return obj;
        }

        function updateKeywords() {
            let displayKeywords = [];
            if (config.SHADING) displayKeywords.push("SHADING");
            displayMaterial.setKeywords(displayKeywords);
        }

        updateKeywords();
        initFramebuffers();

        let lastUpdateTime = Date.now();
        let colorUpdateTimer = 0.0;

        function update() {
            const dt = calcDeltaTime();
            // console.log(dt)
            if (resizeCanvas())
                initFramebuffers();
            updateColors(dt);
            applyInputs();
            step(dt);
            render(null);
            requestAnimationFrame(update);
        }

        function calcDeltaTime() {
            let now = Date.now();
            let dt = (now - lastUpdateTime) / 1000;
            dt = Math.min(dt, 0.016666);
            lastUpdateTime = now;
            return dt;
        }

        function resizeCanvas() {
            let width = scaleByPixelRatio(canvas.clientWidth);
            let height = scaleByPixelRatio(canvas.clientHeight);
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
                return true;
            }
            return false;
        }

        function updateColors(dt) {

            colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED;
            if (colorUpdateTimer >= 1) {
                colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);
                pointers.forEach(p => {
                    p.color = generateColor();
                });
            }
        }

        function applyInputs() {
            pointers.forEach(p => {
                if (p.moved) {
                    p.moved = false;
                    splatPointer(p);
                }
            });
        }

        function step(dt) {
            gl.disable(gl.BLEND);

            curlProgram.bind();
            gl.uniform2f(curlProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);
            gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));
            blit(curl);

            vorticityProgram.bind();
            gl.uniform2f(vorticityProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);
            gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0));
            gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));
            gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
            gl.uniform1f(vorticityProgram.uniforms.dt, dt);
            blit(velocity.write);
            velocity.swap();

            divergenceProgram.bind();
            gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);
            gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0));
            blit(divergence);

            clearProgram.bind();
            gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));
            gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE);
            blit(pressure.write);
            pressure.swap();

            pressureProgram.bind();
            gl.uniform2f(pressureProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);
            gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));
            for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {
                gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1));
                blit(pressure.write);
                pressure.swap();
            }

            gradienSubtractProgram.bind();
            gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);
            gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0));
            gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1));
            blit(velocity.write);
            velocity.swap();

            advectionProgram.bind();
            gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);
            if (!ext.supportLinearFiltering)
                gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, velocity.texelSizeX, velocity.texelSizeY);
            let velocityId = velocity.read.attach(0);
            gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);
            gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);
            gl.uniform1f(advectionProgram.uniforms.dt, dt);
            gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
            blit(velocity.write);
            velocity.swap();

            if (!ext.supportLinearFiltering)
                gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye.texelSizeX, dye.texelSizeY);
            gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0));
            gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1));
            gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
            blit(dye.write);
            dye.swap();
        }

        function render(target) {
            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            gl.enable(gl.BLEND);
            drawDisplay(target);
        }

        function drawDisplay(target) {
            let width = target == null ? gl.drawingBufferWidth : target.width;
            let height = target == null ? gl.drawingBufferHeight : target.height;

            displayMaterial.bind();
            if (config.SHADING)
                gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height);
            gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0));
            blit(target);
        }

        function splatPointer(pointer) {
            let dx = pointer.deltaX * config.SPLAT_FORCE;
            let dy = pointer.deltaY * config.SPLAT_FORCE;
            splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);
        }

        function clickSplat(pointer) {
            const color = generateColor();
            color.r *= 10.0;
            color.g *= 10.0;
            color.b *= 10.0;
            let dx = 10 * (Math.random() - 0.5);
            let dy = 30 * (Math.random() - 0.5);
            splat(pointer.texcoordX, pointer.texcoordY, dx, dy, color);
        }

        function splat(x, y, dx, dy, color) {
            splatProgram.bind();
            gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));
            gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
            gl.uniform2f(splatProgram.uniforms.point, x, y);
            gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);
            gl.uniform1f(splatProgram.uniforms.radius, correctRadius(config.SPLAT_RADIUS / 100.0));
            blit(velocity.write);
            velocity.swap();

            gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0));
            gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);
            blit(dye.write);
            dye.swap();
        }

        function correctRadius(radius) {
            let aspectRatio = canvas.width / canvas.height;
            if (aspectRatio > 1)
                radius *= aspectRatio;
            return radius;
        }

        window.addEventListener('mousedown', e => {
            let pointer = pointers[0];
            let posX = scaleByPixelRatio(e.clientX);
            let posY = scaleByPixelRatio(e.clientY);
            updatePointerDownData(pointer, -1, posX, posY);
            clickSplat(pointer);
        });

        $('body').one('mousemove', e => {
            let pointer = pointers[0];
            let posX = scaleByPixelRatio(e.clientX);
            let posY = scaleByPixelRatio(e.clientY);
            let color = generateColor();
            update();
            updatePointerMoveData(pointer, posX, posY, color);
        });

        window.addEventListener('mousemove', e => {
            let pointer = pointers[0];
            let posX = scaleByPixelRatio(e.clientX);
            let posY = scaleByPixelRatio(e.clientY);
            let color = pointer.color;
            updatePointerMoveData(pointer, posX, posY, color);
        });

        $('body').one('touchstart', e => {
            const touches = e.targetTouches;
            let touch = touches[0]
            let pointer = pointers[0];
            for (let i = 0; i < touches.length; i++) {
                let posX = scaleByPixelRatio(touches[i].clientX);
                let posY = scaleByPixelRatio(touches[i].clientY);
                update();
                updatePointerDownData(pointer, touches[i].identifier, posX, posY);
            }
        });

        window.addEventListener('touchstart', e => {
            const touches = e.targetTouches;
            let pointer = pointers[0];
            for (let i = 0; i < touches.length; i++) {
                let posX = scaleByPixelRatio(touches[i].clientX);
                let posY = scaleByPixelRatio(touches[i].clientY);
                updatePointerDownData(pointer, touches[i].identifier, posX, posY);
            }
        });

        window.addEventListener('touchmove', e => {
            const touches = e.targetTouches;
            let pointer = pointers[0];
            for (let i = 0; i < touches.length; i++) {
                let posX = scaleByPixelRatio(touches[i].clientX);
                let posY = scaleByPixelRatio(touches[i].clientY);
                updatePointerMoveData(pointer, posX, posY, pointer.color);
            }
        }, false);

        window.addEventListener('touchend', e => {
            const touches = e.changedTouches;
            let pointer = pointers[0];

            for (let i = 0; i < touches.length; i++) {
                updatePointerUpData(pointer);
            }
        });

        function updatePointerDownData(pointer, id, posX, posY) {
            pointer.id = id;
            pointer.down = true;
            pointer.moved = false;
            pointer.texcoordX = posX / canvas.width;
            pointer.texcoordY = 1.0 - posY / canvas.height;
            pointer.prevTexcoordX = pointer.texcoordX;
            pointer.prevTexcoordY = pointer.texcoordY;
            pointer.deltaX = 0;
            pointer.deltaY = 0;
            pointer.color = generateColor();
        }

        function updatePointerMoveData(pointer, posX, posY, color) {
            // pointer.down = false;
            pointer.prevTexcoordX = pointer.texcoordX;
            pointer.prevTexcoordY = pointer.texcoordY;
            pointer.texcoordX = posX / canvas.width;
            pointer.texcoordY = 1.0 - posY / canvas.height;
            pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX);
            pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY);
            pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;
            pointer.color = color;
        }

        function updatePointerUpData(pointer) {
            pointer.down = false;
        }

        function correctDeltaX(delta) {
            let aspectRatio = canvas.width / canvas.height;
            if (aspectRatio < 1) delta *= aspectRatio;
            return delta;
        }

        function correctDeltaY(delta) {
            let aspectRatio = canvas.width / canvas.height;
            if (aspectRatio > 1) delta /= aspectRatio;
            return delta;
        }

        function generateColor() {
            let c = HSVtoRGB(Math.random(), 1.0, 1.0);
            c.r *= 0.15;
            c.g *= 0.15;
            c.b *= 0.15;
            return c;
        }

        function HSVtoRGB(h, s, v) {
            let r, g, b, i, f, p, q, t;
            i = Math.floor(h * 6);
            f = h * 6 - i;
            p = v * (1 - s);
            q = v * (1 - f * s);
            t = v * (1 - (1 - f) * s);

            switch (i % 6) {
                case 0: r = v, g = t, b = p; break;
                case 1: r = q, g = v, b = p; break;
                case 2: r = p, g = v, b = t; break;
                case 3: r = p, g = q, b = v; break;
                case 4: r = t, g = p, b = v; break;
                case 5: r = v, g = p, b = q; break;
            }

            return {
                r,
                g,
                b
            };
        }

        function wrap(value, min, max) {
            let range = max - min;
            if (range == 0) return min;
            return (value - min) % range + min;
        }

        function getResolution(resolution) {
            let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;
            if (aspectRatio < 1)
                aspectRatio = 1.0 / aspectRatio;

            let min = Math.round(resolution);
            let max = Math.round(resolution * aspectRatio);

            if (gl.drawingBufferWidth > gl.drawingBufferHeight)
                return { width: max, height: min };
            else
                return { width: min, height: max };
        }

        function scaleByPixelRatio(input) {
            let pixelRatio = window.devicePixelRatio || 1;
            return Math.floor(input * pixelRatio);
        }

        function hashCode(s) {
            if (s.length == 0) return 0;
            let hash = 0;
            for (let i = 0; i < s.length; i++) {
                hash = (hash << 5) - hash + s.charCodeAt(i);
                hash |= 0; // Convert to 32bit integer
            }
            return hash;
        };
    };
});